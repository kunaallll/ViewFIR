{"ast":null,"code":"import React,{useState}from\"react\";import{TextField,Button,Typography,Box,Snackbar,CircularProgress}from\"@mui/material\";import{auth}from\"../firebase\";// Import the auth object\nimport{RecaptchaVerifier,signInWithPhoneNumber}from\"firebase/auth\";// Import necessary functions\nimport{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const Login=_ref=>{let{onLoginSuccess}=_ref;const[phoneNumber,setPhoneNumber]=useState(\"\");// Store only the 10-digit number\nconst[otp,setOtp]=useState(\"\");const[verificationId,setVerificationId]=useState(null);const[loading,setLoading]=useState(false);const[snackbarOpen,setSnackbarOpen]=useState(false);const[snackbarMessage,setSnackbarMessage]=useState(\"\");const handlePhoneNumberChange=e=>{const value=e.target.value.replace(\"+91\",\"\");// Remove +91 before updating state\n// Only allow 10 digits for the phone number\nif(value.length<=10&&/^[0-9]*$/.test(value)){setPhoneNumber(value);}};const handleOtpChange=e=>{setOtp(e.target.value);};const requestOtp=async()=>{setLoading(true);try{// Format the phone number with +91\nconst formattedPhoneNumber=`+91${phoneNumber}`;const appVerifier=new RecaptchaVerifier(auth,\"recaptcha-container\",{size:\"invisible\",callback:response=>{// reCAPTCHA solved - will proceed with submit function\n}});const confirmationResult=await signInWithPhoneNumber(auth,formattedPhoneNumber,appVerifier);setVerificationId(confirmationResult);setSnackbarMessage(\"OTP sent to your phone.\");setSnackbarOpen(true);}catch(error){console.error(\"Error requesting OTP:\",error);if(error.code===\"auth/invalid-phone-number\"){setSnackbarMessage(\"Invalid phone number format. Please use 10 digits.\");}else{setSnackbarMessage(\"Failed to send OTP. Please try again.\");}setSnackbarOpen(true);}finally{setLoading(false);}};const verifyOtp=async()=>{setLoading(true);try{// Add the country code back\nconst data=await verificationId.confirm(otp);const token=await data.user.getIdToken();// Store the token in localStorage\nlocalStorage.setItem(\"token\",token);// Callback to update user state in App.js\nonLoginSuccess(token);setSnackbarMessage(\"Login successful!\");setSnackbarOpen(true);}catch(error){console.error(\"Error verifying OTP:\",error);if(error){setSnackbarMessage(error||\"Failed to verify OTP. Please try again.\");}else{setSnackbarMessage(\"Failed to verify OTP. Please try again.\");}setSnackbarOpen(true);}finally{setLoading(false);}};const handleSnackbarClose=()=>{setSnackbarOpen(false);};return/*#__PURE__*/_jsxs(Box,{sx:{maxWidth:400,mx:\"auto\",mt:4,p:2,border:\"1px solid #ccc\",borderRadius:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",gutterBottom:true,children:\"Login\"}),/*#__PURE__*/_jsx(\"div\",{id:\"recaptcha-container\"}),\" \",/*#__PURE__*/_jsx(TextField,{label:\"Phone Number\",value:`+91${phoneNumber}`// Display +91 in the input, but not in the state\n,onChange:handlePhoneNumberChange,fullWidth:true,required:true,sx:{mb:2},placeholder:\"Enter 10-digit number\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:requestOtp,disabled:loading||phoneNumber.length!==10,children:loading?/*#__PURE__*/_jsx(CircularProgress,{size:24}):\"Request OTP\"}),verificationId&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TextField,{label:\"OTP\",value:otp,onChange:handleOtpChange,fullWidth:true,required:true,sx:{mt:2,mb:2}}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:verifyOtp,disabled:loading||!otp,children:loading?/*#__PURE__*/_jsx(CircularProgress,{size:24}):\"Verify OTP\"})]}),/*#__PURE__*/_jsx(Snackbar,{open:snackbarOpen,onClose:handleSnackbarClose,message:snackbarMessage,autoHideDuration:4000})]});};export default Login;// import React, { useEffect, useState } from \"react\";\n// import {\n//   TextField,\n//   Button,\n//   Typography,\n//   Box,\n//   Snackbar,\n//   CircularProgress,\n// } from \"@mui/material\";\n// import { auth } from \"../firebase\"; // Import the auth object\n// import { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\"; // Import necessary functions\n// const Login = ({ onLoginSuccess }) => {\n//   const [phoneNumber, setPhoneNumber] = useState(\"\");\n//   const [otp, setOtp] = useState(\"\");\n//   const [loading, setLoading] = useState(false);\n//   const [snackbarOpen, setSnackbarOpen] = useState(false);\n//   const [verificationId, setVerificationId] = useState(null);\n//   const [snackbarMessage, setSnackbarMessage] = useState(\"\");\n//   useEffect(() => {\n//     // Ensure the reCAPTCHA container is present in the DOM before initializing\n//     if (document.getElementById(\"recaptcha-container\")) {\n//       const appVerifier = new RecaptchaVerifier(auth, \"recaptcha-container\", {\n//         size: \"invisible\", // Set this to 'invisible' or 'normal'\n//         callback: (response) => {\n//           // reCAPTCHA solved - will proceed with submit function\n//         },\n//         \"expired-callback\": () => {\n//           // Response expired. Ask user to re-submit the request\n//         },\n//       }); // Pass the auth instance\n//       return () => {\n//         appVerifier.clear(); // Cleanup the verifier on unmount\n//       };\n//     }\n//   }, []);\n//   const handlePhoneNumberChange = (e) => {\n//     const value = e.target.value.replace(\"+91\", \"\"); // Remove +91 before updating state\n//     if (value.length <= 10 && /^[0-9]*$/.test(value)) {\n//       setPhoneNumber(value);\n//     }\n//   };\n//   const requestOtp = async () => {\n//     setLoading(true);\n//     try {\n//       // Format the phone number with +91\n//       const formattedPhoneNumber = `+91${phoneNumber}`;\n//       const appVerifier = new RecaptchaVerifier(auth, \"recaptcha-container\", {\n//         size: \"invisible\",\n//         callback: (response) => {\n//           // reCAPTCHA solved - will proceed with submit function\n//         },\n//       });\n//       const confirmationResult = await signInWithPhoneNumber(\n//         auth,\n//         formattedPhoneNumber,\n//         appVerifier\n//       );\n//       setVerificationId(confirmationResult.verificationId);\n//       setSnackbarMessage(\"OTP sent to your phone.\");\n//       setSnackbarOpen(true);\n//     } catch (error) {\n//       console.error(\"Error requesting OTP:\", error);\n//       if (error.code === \"auth/invalid-phone-number\") {\n//         setSnackbarMessage(\n//           \"Invalid phone number format. Please use 10 digits.\"\n//         );\n//       } else {\n//         setSnackbarMessage(\"Failed to send OTP. Please try again.\");\n//       }\n//       setSnackbarOpen(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const verifyOtp = async () => {\n//     setLoading(true);\n//     try {\n//       const formattedPhoneNumber = `+91${phoneNumber}`;\n//       const response = await fetch(\"https://viewfirbackend.onrender.com/auth/verifyOtp\", {\n//         method: \"POST\",\n//         headers: { \"Content-Type\": \"application/json\" },\n//         body: JSON.stringify({\n//           phoneNumber: formattedPhoneNumber,\n//           otp,\n//           verificationId,\n//         }),\n//       });\n//       const data = await response.json();\n//       if (response.ok) {\n//         const token = data.token; // Get the token from the response\n//         localStorage.setItem(\"token\", token); // Store the token in localStorage\n//         onLoginSuccess(token); // Call the success callback\n//         setSnackbarMessage(\"Login successful!\");\n//       } else {\n//         setSnackbarMessage(data.message || \"Failed to verify OTP.\");\n//       }\n//       setSnackbarOpen(true);\n//     } catch (error) {\n//       console.error(\"Error verifying OTP:\", error);\n//       setSnackbarMessage(\"Failed to verify OTP. Please try again.\");\n//       setSnackbarOpen(true);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n//   const handleSnackbarClose = () => {\n//     setSnackbarOpen(false);\n//   };\n//   return (\n//     <Box\n//       sx={{\n//         maxWidth: 400,\n//         mx: \"auto\",\n//         mt: 4,\n//         p: 2,\n//         border: \"1px solid #ccc\",\n//         borderRadius: 2,\n//       }}\n//     >\n//       <Typography variant=\"h4\" gutterBottom>\n//         Login\n//       </Typography>\n//       <div id=\"recaptcha-container\"></div>\n//       <TextField\n//         label=\"Phone Number\"\n//         value={`+91${phoneNumber}`}\n//         onChange={handlePhoneNumberChange}\n//         fullWidth\n//         required\n//         sx={{ mb: 2 }}\n//         placeholder=\"Enter 10-digit number\"\n//       />\n//       <Button\n//         variant=\"contained\"\n//         onClick={requestOtp}\n//         disabled={loading || phoneNumber.length !== 10}\n//       >\n//         {loading ? <CircularProgress size={24} /> : \"Request OTP\"}\n//       </Button>\n//       {verificationId && (\n//         <>\n//           <TextField\n//             label=\"OTP\"\n//             value={otp}\n//             onChange={(e) => setOtp(e.target.value)}\n//             fullWidth\n//             required\n//             sx={{ mt: 2, mb: 2 }}\n//           />\n//           <Button\n//             variant=\"contained\"\n//             onClick={verifyOtp}\n//             disabled={loading || !otp}\n//           >\n//             {loading ? <CircularProgress size={24} /> : \"Verify OTP\"}\n//           </Button>\n//         </>\n//       )}\n//       <Snackbar\n//         open={snackbarOpen}\n//         onClose={handleSnackbarClose}\n//         message={snackbarMessage}\n//         autoHideDuration={4000}\n//       />\n//     </Box>\n//   );\n// };\n// export default Login;","map":{"version":3,"names":["React","useState","TextField","Button","Typography","Box","Snackbar","CircularProgress","auth","RecaptchaVerifier","signInWithPhoneNumber","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Login","_ref","onLoginSuccess","phoneNumber","setPhoneNumber","otp","setOtp","verificationId","setVerificationId","loading","setLoading","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","handlePhoneNumberChange","e","value","target","replace","length","test","handleOtpChange","requestOtp","formattedPhoneNumber","appVerifier","size","callback","response","confirmationResult","error","console","code","verifyOtp","data","confirm","token","user","getIdToken","localStorage","setItem","handleSnackbarClose","sx","maxWidth","mx","mt","p","border","borderRadius","children","variant","gutterBottom","id","label","onChange","fullWidth","required","mb","placeholder","onClick","disabled","open","onClose","message","autoHideDuration"],"sources":["C:/Users/kunal/OneDrive/Desktop/react/ViewFIR/src/components/Login.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Box,\r\n  Snackbar,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { auth } from \"../firebase\"; // Import the auth object\r\nimport { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\"; // Import necessary functions\r\n\r\nconst Login = ({ onLoginSuccess }) => {\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\"); // Store only the 10-digit number\r\n  const [otp, setOtp] = useState(\"\");\r\n  const [verificationId, setVerificationId] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n\r\n  const handlePhoneNumberChange = (e) => {\r\n    const value = e.target.value.replace(\"+91\", \"\"); // Remove +91 before updating state\r\n    // Only allow 10 digits for the phone number\r\n    if (value.length <= 10 && /^[0-9]*$/.test(value)) {\r\n      setPhoneNumber(value);\r\n    }\r\n  };\r\n\r\n  const handleOtpChange = (e) => {\r\n    setOtp(e.target.value);\r\n  };\r\n\r\n  const requestOtp = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Format the phone number with +91\r\n      const formattedPhoneNumber = `+91${phoneNumber}`;\r\n\r\n  const appVerifier = new RecaptchaVerifier(auth, \"recaptcha-container\", {\r\n    size: \"invisible\",\r\n    callback: (response) => {\r\n      // reCAPTCHA solved - will proceed with submit function\r\n    },\r\n  });\r\n\r\n      const confirmationResult = await signInWithPhoneNumber(\r\n        auth,\r\n        formattedPhoneNumber,\r\n        appVerifier\r\n      );\r\n      setVerificationId(confirmationResult);\r\n      setSnackbarMessage(\"OTP sent to your phone.\");\r\n      setSnackbarOpen(true);\r\n    } catch (error) {\r\n      console.error(\"Error requesting OTP:\", error);\r\n      if (error.code === \"auth/invalid-phone-number\") {\r\n        setSnackbarMessage(\r\n          \"Invalid phone number format. Please use 10 digits.\"\r\n        );\r\n      } else {\r\n        setSnackbarMessage(\"Failed to send OTP. Please try again.\");\r\n      }\r\n      setSnackbarOpen(true);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  const verifyOtp = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Add the country code back\r\n      const data = await verificationId.confirm(otp);\r\n\r\n      const token = await data.user.getIdToken();\r\n      // Store the token in localStorage\r\n      localStorage.setItem(\"token\", token);\r\n\r\n      // Callback to update user state in App.js\r\n      onLoginSuccess(token);\r\n      setSnackbarMessage(\"Login successful!\");\r\n      setSnackbarOpen(true);\r\n    } catch (error) {\r\n      console.error(\"Error verifying OTP:\", error);\r\n      if (error) {\r\n        setSnackbarMessage(error || \"Failed to verify OTP. Please try again.\");\r\n      } else {\r\n        setSnackbarMessage(\"Failed to verify OTP. Please try again.\");\r\n      }\r\n      setSnackbarOpen(true);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        maxWidth: 400,\r\n        mx: \"auto\",\r\n        mt: 4,\r\n        p: 2,\r\n        border: \"1px solid #ccc\",\r\n        borderRadius: 2,\r\n      }}\r\n    >\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Login\r\n      </Typography>\r\n      <div id=\"recaptcha-container\"></div>{\" \"}\r\n      {/* ReCAPTCHA will be rendered here */}\r\n      <TextField\r\n        label=\"Phone Number\"\r\n        value={`+91${phoneNumber}`} // Display +91 in the input, but not in the state\r\n        onChange={handlePhoneNumberChange}\r\n        fullWidth\r\n        required\r\n        sx={{ mb: 2 }}\r\n        placeholder=\"Enter 10-digit number\"\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={requestOtp}\r\n        disabled={loading || phoneNumber.length !== 10}\r\n      >\r\n        {loading ? <CircularProgress size={24} /> : \"Request OTP\"}\r\n      </Button>\r\n      {verificationId && (\r\n        <>\r\n          <TextField\r\n            label=\"OTP\"\r\n            value={otp}\r\n            onChange={handleOtpChange}\r\n            fullWidth\r\n            required\r\n            sx={{ mt: 2, mb: 2 }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={verifyOtp}\r\n            disabled={loading || !otp}\r\n          >\r\n            {loading ? <CircularProgress size={24} /> : \"Verify OTP\"}\r\n          </Button>\r\n        </>\r\n      )}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        onClose={handleSnackbarClose}\r\n        message={snackbarMessage}\r\n        autoHideDuration={4000}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   TextField,\r\n//   Button,\r\n//   Typography,\r\n//   Box,\r\n//   Snackbar,\r\n//   CircularProgress,\r\n// } from \"@mui/material\";\r\n// import { auth } from \"../firebase\"; // Import the auth object\r\n// import { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\"; // Import necessary functions\r\n\r\n// const Login = ({ onLoginSuccess }) => {\r\n//   const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n//   const [otp, setOtp] = useState(\"\");\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n//   const [verificationId, setVerificationId] = useState(null);\r\n//   const [snackbarMessage, setSnackbarMessage] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     // Ensure the reCAPTCHA container is present in the DOM before initializing\r\n//     if (document.getElementById(\"recaptcha-container\")) {\r\n//       const appVerifier = new RecaptchaVerifier(auth, \"recaptcha-container\", {\r\n//         size: \"invisible\", // Set this to 'invisible' or 'normal'\r\n//         callback: (response) => {\r\n//           // reCAPTCHA solved - will proceed with submit function\r\n//         },\r\n//         \"expired-callback\": () => {\r\n//           // Response expired. Ask user to re-submit the request\r\n//         },\r\n//       }); // Pass the auth instance\r\n\r\n//       return () => {\r\n//         appVerifier.clear(); // Cleanup the verifier on unmount\r\n//       };\r\n//     }\r\n//   }, []);\r\n\r\n//   const handlePhoneNumberChange = (e) => {\r\n//     const value = e.target.value.replace(\"+91\", \"\"); // Remove +91 before updating state\r\n//     if (value.length <= 10 && /^[0-9]*$/.test(value)) {\r\n//       setPhoneNumber(value);\r\n//     }\r\n//   };\r\n\r\n//   const requestOtp = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       // Format the phone number with +91\r\n//       const formattedPhoneNumber = `+91${phoneNumber}`;\r\n\r\n//       const appVerifier = new RecaptchaVerifier(auth, \"recaptcha-container\", {\r\n//         size: \"invisible\",\r\n//         callback: (response) => {\r\n//           // reCAPTCHA solved - will proceed with submit function\r\n//         },\r\n//       });\r\n\r\n//       const confirmationResult = await signInWithPhoneNumber(\r\n//         auth,\r\n//         formattedPhoneNumber,\r\n//         appVerifier\r\n//       );\r\n//       setVerificationId(confirmationResult.verificationId);\r\n//       setSnackbarMessage(\"OTP sent to your phone.\");\r\n//       setSnackbarOpen(true);\r\n//     } catch (error) {\r\n//       console.error(\"Error requesting OTP:\", error);\r\n//       if (error.code === \"auth/invalid-phone-number\") {\r\n//         setSnackbarMessage(\r\n//           \"Invalid phone number format. Please use 10 digits.\"\r\n//         );\r\n//       } else {\r\n//         setSnackbarMessage(\"Failed to send OTP. Please try again.\");\r\n//       }\r\n//       setSnackbarOpen(true);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const verifyOtp = async () => {\r\n//     setLoading(true);\r\n//     try {\r\n//       const formattedPhoneNumber = `+91${phoneNumber}`;\r\n//       const response = await fetch(\"https://viewfirbackend.onrender.com/auth/verifyOtp\", {\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify({\r\n//           phoneNumber: formattedPhoneNumber,\r\n//           otp,\r\n//           verificationId,\r\n//         }),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       if (response.ok) {\r\n//         const token = data.token; // Get the token from the response\r\n//         localStorage.setItem(\"token\", token); // Store the token in localStorage\r\n//         onLoginSuccess(token); // Call the success callback\r\n//         setSnackbarMessage(\"Login successful!\");\r\n//       } else {\r\n//         setSnackbarMessage(data.message || \"Failed to verify OTP.\");\r\n//       }\r\n//       setSnackbarOpen(true);\r\n//     } catch (error) {\r\n//       console.error(\"Error verifying OTP:\", error);\r\n//       setSnackbarMessage(\"Failed to verify OTP. Please try again.\");\r\n//       setSnackbarOpen(true);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleSnackbarClose = () => {\r\n//     setSnackbarOpen(false);\r\n//   };\r\n\r\n//   return (\r\n//     <Box\r\n//       sx={{\r\n//         maxWidth: 400,\r\n//         mx: \"auto\",\r\n//         mt: 4,\r\n//         p: 2,\r\n//         border: \"1px solid #ccc\",\r\n//         borderRadius: 2,\r\n//       }}\r\n//     >\r\n//       <Typography variant=\"h4\" gutterBottom>\r\n//         Login\r\n//       </Typography>\r\n//       <div id=\"recaptcha-container\"></div>\r\n//       <TextField\r\n//         label=\"Phone Number\"\r\n//         value={`+91${phoneNumber}`}\r\n//         onChange={handlePhoneNumberChange}\r\n//         fullWidth\r\n//         required\r\n//         sx={{ mb: 2 }}\r\n//         placeholder=\"Enter 10-digit number\"\r\n//       />\r\n//       <Button\r\n//         variant=\"contained\"\r\n//         onClick={requestOtp}\r\n//         disabled={loading || phoneNumber.length !== 10}\r\n//       >\r\n//         {loading ? <CircularProgress size={24} /> : \"Request OTP\"}\r\n//       </Button>\r\n//       {verificationId && (\r\n//         <>\r\n//           <TextField\r\n//             label=\"OTP\"\r\n//             value={otp}\r\n//             onChange={(e) => setOtp(e.target.value)}\r\n//             fullWidth\r\n//             required\r\n//             sx={{ mt: 2, mb: 2 }}\r\n//           />\r\n//           <Button\r\n//             variant=\"contained\"\r\n//             onClick={verifyOtp}\r\n//             disabled={loading || !otp}\r\n//           >\r\n//             {loading ? <CircularProgress size={24} /> : \"Verify OTP\"}\r\n//           </Button>\r\n//         </>\r\n//       )}\r\n//       <Snackbar\r\n//         open={snackbarOpen}\r\n//         onClose={handleSnackbarClose}\r\n//         message={snackbarMessage}\r\n//         autoHideDuration={4000}\r\n//       />\r\n//     </Box>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}